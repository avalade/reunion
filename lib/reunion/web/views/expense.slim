
h3
  | Tax Expense Category: 
  = query.downcase


ul.nav.nav-pills
  li
    a href="/expense"
      | Overview
  li
    a href="/expense/none"
      | Untagged
  - tax_expense_names.each do |name|
    li
      a href="/expense/#{name}" 
        == name


- if defined?(results) && results
  table.table.table-condensed
    tr
      th
       = "Summary of #{results.count} expenses:"
      th
        - debits = results.map{|t|t.amount}.select{|v| v < 0}
        = debits.inject(0, &:+).to_usd  + " (#{debits.count.to_s})"
      th
        - credits = results.map{|t|t.amount}.select{|v| v >= 0}
        = credits.inject(0, &:+).to_usd  + " (#{credits.count.to_s})"
      th
        = results.first[:tax_expense]

    - results.each do |r|
      tr
        td
          = r.date_str
        td
          = r.amount < 0 ? r.amount_str : ""
        td
          = r.amount >= 0 ? r.amount_str : ""
        td
          = r.description
        td
          = r[:tax_expense]

- deductible_categories = [:advertising, :contract_labor, :insurance, :meals, :misc, :office, :property_rent, :section179, :supplies, :travel, :utilities, :home_office]

- if defined?(txns)
  table.table.table-condensed
    tr
      th Tax Expense Category
      th Count
      th Net
      th Deductible
    - uncategorized = txns.select{|t| t[:tax_expense].nil?}
    tr
      td Uncategorized
      td
        = uncategorized.count
      td
        = uncategorized.map{|t|t.amount}.inject(0, &:+).to_usd
    - cats = txns.map{|t|t[:tax_expense]}.compact.uniq.sort
    - cats.each do |cat|
      tr
        - subset = txns.select{|t| t[:tax_expense] == cat}
        td
          = cat
        td
          = subset.count
        td
          = subset.map{|t|t.amount}.inject(0, &:+).to_usd
        td
          - if deductible_categories.include?(cat)
            = subset.map{|t|t.amount}.inject(0, &:+).to_usd

    ruby:
      @filters = {
        money_in: lambda{|t| !t[:transfer_pair] && t.amount > 0 },
        money_out: lambda{|t| !t[:transfer_pair] && t.amount < 0 }, 
        net: lambda{|t| !t[:transfer_pair] },
        transfers_paired: lambda{|t| t[:transfer_pair] },
        transfers_unpaired: lambda{|t|  t[:transfer_pair].nil? && t[:transfer] },
        deductible_expenses: lambda{|t|  t[:transfer_pair].nil? && deductible_categories.include?(t[:tax_expense])},
        income: lambda{|t| t[:transfer_pair].nil? && t[:tax_expense] == :income}
      }
    table.table.table-condensed
      tr
        th Formula
        th Count
        th Amount
        th Currency
      - ["USD", "EUR"].each do |currency|
        - @filters.each do |name, lambda|
          - subset = all_txns.select(&lambda).select{|t| t[:currency] == currency || (t[:currency].nil? && currency == "USD")}
          tr
            td
              = name
            td
              = subset.count
            td
              = subset.map{|t|t.amount}.inject(0, &:+).to_usd
            td
              = currency

